#ifndef DEF_INCLUDE_RECSYS_H
	#define DEF_INCLUDE_RECSYS_H

	#ifdef DEF_RECSYS_C
		#define EXTERN
	#else
		#define EXTERN extern
	#endif

    enum
    {
        // in/out.
                
        // DEF_RECORD_DATA_USER_09 // wup.
		DEF_REC_WUP_X2 = DEF_RECORD_DATA_USER_01 ,
		DEF_REC_WUP_X3 ,
		DEF_REC_WUP_X4 ,
		DEF_REC_WUP_X5 ,
		DEF_REC_WUP_LOSE ,
		DEF_REC_WUP_NULL ,
		
		DEF_REC_WUP_BONUS_TIMES ,
		DEF_REC_WUP_BONUS_TOTAL ,
		DEF_REC_WUP_LIMIT_TIMES ,
		DEF_REC_WUP_LIMIT_TOTAL ,
		DEF_REC_WUP_SAVE_TIMES ,
		DEF_REC_WUP_SAVE_TOTAL ,	

        // DEF_RECORD_DATA_USER_18 // item x3
		DEF_REC_SYM00_X3 ,
		DEF_REC_SYM01_X3 ,
		DEF_REC_SYM02_X3 ,
		DEF_REC_SYM03_X3 ,
		DEF_REC_SYM04_X3 ,
		DEF_REC_SYM05_X3 ,
		DEF_REC_SYM06_X3 ,
		DEF_REC_SYM07_X3 ,
		DEF_REC_SYM08_X3 ,
		DEF_REC_SYM09_X3 ,

        // DEF_RECORD_DATA_USER_28 // item x4
		DEF_REC_SYM00_X4 ,
		DEF_REC_SYM01_X4 ,
		DEF_REC_SYM02_X4 ,
		DEF_REC_SYM03_X4 ,
		DEF_REC_SYM04_X4 ,
		DEF_REC_SYM05_X4 ,
		DEF_REC_SYM06_X4 ,
		DEF_REC_SYM07_X4 ,
		DEF_REC_SYM08_X4 ,
		DEF_REC_SYM09_X4 ,

        // DEF_RECORD_DATA_USER_38 // item x5
		DEF_REC_SYM00_X5 ,
		DEF_REC_SYM01_X5 ,
		DEF_REC_SYM02_X5 ,
		DEF_REC_SYM03_X5 ,
		DEF_REC_SYM04_X5 ,
		DEF_REC_SYM05_X5 ,
		DEF_REC_SYM06_X5 ,
		DEF_REC_SYM07_X5 ,
		DEF_REC_SYM08_X5 ,
		DEF_REC_SYM09_X5 ,

        // DEF_RECORD_DATA_USER_48 // item all
		DEF_REC_SYM00_ALL ,
		DEF_REC_SYM01_ALL ,
		DEF_REC_SYM02_ALL ,
		DEF_REC_SYM03_ALL ,
		DEF_REC_SYM04_ALL ,
		DEF_REC_SYM05_ALL ,
		DEF_REC_SYM06_ALL ,
		DEF_REC_SYM07_ALL ,
		DEF_REC_SYM08_ALL ,
		DEF_REC_SYM09_ALL ,
                     
        // DEF_RECORD_DATA_USER_58
		DEF_REC_SYM_WILD_X3 ,
		DEF_REC_SYM_WILD_X4 ,
		DEF_REC_SYM_WILD_X5 ,

		DEF_REC_SYM_FEVER_X3 ,
		DEF_REC_SYM_FEVER_X4 ,
		DEF_REC_SYM_FEVER_X5 ,

		DEF_REC_SYM_FREE_X3 ,
		DEF_REC_SYM_FREE_X4 ,
		DEF_REC_SYM_FREE_X5 ,

        // DEF_RECORD_DATA_USER_67
        DEF_REC_BONUS_WINTOTAL		,
        DEF_REC_FEVER_WINTOTAL		,
        DEF_REC_FREE_WINTOTAL		,

        // DEF_RECORD_DATA_USER_70
        DEF_REC_MAXID
    } ; 

	enum E_RECSYS_STATE 
    {
		E_RECSYS_STATE_INIT = 0 ,
		E_RECSYS_STATE_MAIN_MENU ,		
		E_RECSYS_STATE_LAST_MENU ,
		E_RECSYS_STATE_LAST_MAIN ,
		E_RECSYS_STATE_LAST_WUP ,		
		E_RECSYS_STATE_MASTER_MENU ,
		E_RECSYS_STATE_ADJUST_MENU ,
		E_RECSYS_STATE_REPORT_INFO ,
		E_RECSYS_STATE_REPORT_CODE ,
		E_RECSYS_STATE_REPORT_RESET ,
		E_RECSYS_STATE_SYSSET_MENU ,
		E_RECSYS_STATE_NO_SET ,
		E_RECSYS_STATE_MASTER_CUR ,
		E_RECSYS_STATE_MASTER_LAST,
		E_RECSYS_STATE_MASTER_TOL ,
		E_RECSYS_STATE_WUP_CUR ,
		E_RECSYS_STATE_WUP_TOL ,
		E_RECSYS_STATE_SLAVE ,
		E_RECSYS_STATE_ADJUST_DIRECT ,
		E_RECSYS_STATE_ADJUST_REPORT ,
		E_RECSYS_STATE_ADJUST_TIME ,
		E_RECSYS_STATE_REPORT_ADJUST ,
		E_RECSYS_STATE_REPORT_NO ,		
		E_RECSYS_STATE_PASSWORD ,
		E_RECSYS_STATE_CHECKFIX_PASSWORD ,
		E_RECSYS_STATE_FIX_PASSWORD ,
		E_RECSYS_STATE_REFIX_PASSWORD ,
        E_RECSYS_STATE_BLINK_MSG ,
        E_RECSYS_STATE_BUFSHOW ,
        E_RECSYS_STATE_TEST ,
        E_RECSYS_STATE_TESTQC ,
        E_RECSYS_STATE_RESET ,
        E_RECSYS_STATE_EXIT ,
        E_RECSYS_STATE_CRASH ,
        E_RECSYS_STATE_UPDATA_TIME ,
        #ifdef DEF_ENABLE_MULTI_SELECT
        E_RECSYS_STATE_HALT ,
        #endif
        E_RECSYS_STATE_MAX
	} ;

	EXTERN UBYTE ubRecSysShowSTR[64] ;
	EXTERN ULONG ulRecSys_LastState , ulRecSys_NextState ;
		
	EXTERN void vRecSys_Initial(void) ;
	EXTERN void vRecSys_Process(void) ;

	#undef EXTERN
#endif
